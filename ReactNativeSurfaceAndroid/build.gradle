apply plugin: 'com.android.library'

apply plugin: 'de.undercouch.download'

import org.apache.tools.ant.filters.ReplaceTokens

android {
    compileSdkVersion 27
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 56
        versionName "0.56.0001"

        ndk {
            moduleName "reactnativesurface"
        }

        buildConfigField 'boolean', 'IS_INTERNAL_BUILD', 'false'
        buildConfigField 'int', 'EXOPACKAGE_FLAGS', '0'
        testApplicationId "com.facebook.react.tests.gradle"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        externalNativeBuild {
            cmake {
                cppFlags  "-fexceptions"
                abiFilters "x86", "armeabi-v7a", "x86_64", "arm64-v8a"
                arguments "-DANDROID_CPP_FEATURES=rtti exceptions"
            }
        }
        sourceSets.main {
            jni.srcDirs = []
            jniLibs.srcDir "$buildDir/react-ndk/exported"
            res.srcDirs += ['src/../../deps/react-native-0.56.0/ReactAndroid/src/main/res/devsupport',
                           'src/../../deps/react-native-0.56.0/ReactAndroid/src/main/res/shell',
                           'src/../../deps/react-native-0.56.0/ReactAndroid/src/main/res/views/modal',
                           'src/../../deps/react-native-0.56.0/ReactAndroid/src/main/res/views/uimanager']
            java {
                srcDirs += ['src/../../deps/react-native-0.56.0/ReactAndroid/src/main/java',
                           'src/../../deps/react-native-0.56.0/ReactAndroid/src/main/libraries/soloader/java',
                           'src/../../deps/react-native-0.56.0/ReactAndroid/src/main/jni/first-party/fb/jni/java']
                exclude 'com/facebook/react/processing'
                exclude 'com/facebook/react/module/processing'
            }
        }


    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            universalApk true
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn prepareNdkBuildDependencies
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

// We download various C++ open-source dependencies into downloads.
// We then copy both the downloaded code and our custom makefiles and headers into third-party-ndk.
// After that we build native code from src/main/jni with module path pointing at third-party-ndk.

def customDownloadsDir = System.getenv("REACT_NATIVE_DOWNLOADS_DIR")
def downloadsDir = customDownloadsDir ? new File(customDownloadsDir) : new File("$buildDir/downloads")
def thirdPartyNdkDir = new File("$buildDir/third-party-ndk")

// You need to have following folders in this directory:
//   - boost_1_63_0
//   - double-conversion-1.1.1
//   - folly-deprecate-dynamic-initializer
//   - glog-0.3.5
//   - jsc-headers
def dependenciesPath = System.getenv("REACT_NATIVE_DEPENDENCIES")

task createNativeDepsDirectories {
    downloadsDir.mkdirs()
    thirdPartyNdkDir.mkdirs()
}

// The Boost library is a very large download (>100MB).
// If Boost is already present on your system, define the REACT_NATIVE_BOOST_PATH env variable
// and the build will use that.
def boostPath = dependenciesPath ?: System.getenv("REACT_NATIVE_BOOST_PATH")

task downloadBoost(dependsOn: createNativeDepsDirectories, type: Download) {
    src 'https://github.com/react-native-community/boost-for-react-native/releases/download/v1.63.0-0/boost_1_63_0.tar.gz'
    onlyIfNewer true
    overwrite false
    dest new File(downloadsDir, 'boost_1_63_0.tar.gz')
}

task prepareBoost(dependsOn: boostPath ? [] : [downloadBoost], type: Copy) {
    from boostPath ?: tarTree(resources.gzip(downloadBoost.dest))
    from 'src/main/jni/third-party/boost/Android.mk'
    include 'Android.mk', 'boost_1_63_0/boost/**/*.hpp', 'boost/boost/**/*.hpp'
    includeEmptyDirs = false
    into "$thirdPartyNdkDir/boost"
    doLast {
        file("$thirdPartyNdkDir/boost/boost").renameTo("$thirdPartyNdkDir/boost/boost_1_63_0")
    }
}

task downloadDoubleConversion(dependsOn: createNativeDepsDirectories, type: Download) {
    src 'https://github.com/google/double-conversion/archive/v1.1.8.tar.gz'
    onlyIfNewer true
    overwrite false
    dest new File(downloadsDir, 'double-conversion-1.1.8.tar.gz')
}

task prepareDoubleConversion(dependsOn: dependenciesPath ? [] : [downloadDoubleConversion], type: Copy) {
    from dependenciesPath ?: tarTree(downloadDoubleConversion.dest)
    from '../deps/react-native-0.56.0/ReactAndroid/src/main/jni/third-party/double-conversion/Android.mk'
    include 'double-conversion-1.1.8/src/**/*', 'Android.mk'
    filesMatching('*/src/**/*', {fname -> fname.path = "double-conversion/${fname.name}"})
    includeEmptyDirs = false
    into "$thirdPartyNdkDir/double-conversion"
}

task downloadFolly(dependsOn: createNativeDepsDirectories, type: Download) {
    src 'https://github.com/facebook/folly/archive/v2016.10.31.00.tar.gz'
    onlyIfNewer true
    overwrite false
    dest new File(downloadsDir, 'folly-2016.10.31.00.tar.gz');
}

task prepareFolly(dependsOn: dependenciesPath ? [] : [downloadFolly], type: Copy) {
    from dependenciesPath ?: tarTree(downloadFolly.dest)
    from '../deps/react-native-0.56.0/ReactAndroid/src/main/jni/third-party/folly/Android.mk'
    include 'folly-2016.10.31.00/folly/**/*', 'Android.mk'
    eachFile {fname -> fname.path = (fname.path - "folly-2016.10.31.00/")}
    includeEmptyDirs = false
    into "$thirdPartyNdkDir/folly"
}

task downloadGlog(dependsOn: createNativeDepsDirectories, type: Download) {
    src 'https://github.com/google/glog/archive/v0.3.5.tar.gz'
    onlyIfNewer true
    overwrite false
    dest new File(downloadsDir, 'glog-0.3.5.tar.gz')
}

// Prepare glog sources to be compiled, this task will perform steps that normally should've been
// executed by automake. This way we can avoid dependencies on make/automake
task prepareGlog(dependsOn: dependenciesPath ? [] : [downloadGlog], type: Copy) {
    from dependenciesPath ?: tarTree(downloadGlog.dest)
    from '../deps/react-native-0.56.0/ReactAndroid/src/main/jni/third-party/glog/'
    include 'glog-0.3.5/src/**/*', 'Android.mk', 'config.h'
    includeEmptyDirs = false
    filesMatching('**/*.h.in') {
        filter(ReplaceTokens, tokens: [
                ac_cv_have_unistd_h: '1',
                ac_cv_have_stdint_h: '1',
                ac_cv_have_systypes_h: '1',
                ac_cv_have_inttypes_h: '1',
                ac_cv_have_libgflags: '0',
                ac_google_start_namespace: 'namespace google {',
                ac_cv_have_uint16_t: '1',
                ac_cv_have_u_int16_t: '1',
                ac_cv_have___uint16: '0',
                ac_google_end_namespace: '}',
                ac_cv_have___builtin_expect: '1',
                ac_google_namespace: 'google',
                ac_cv___attribute___noinline: '__attribute__ ((noinline))',
                ac_cv___attribute___noreturn: '__attribute__ ((noreturn))',
                ac_cv___attribute___printf_4_5: '__attribute__((__format__ (__printf__, 4, 5)))'
        ])
        it.path = (it.name - '.in')
    }
    into "$thirdPartyNdkDir/glog"
}

task prepareNdkBuildDependencies {
    dependsOn prepareBoost
    dependsOn prepareDoubleConversion
    dependsOn prepareFolly
    dependsOn prepareGlog
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:27.1.1'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation fileTree(dir: 'src/../../deps/react-native-0.56.0/ReactAndroid/src/main/third-party/java/infer-annotations/', include: ['*.jar'])
    implementation 'javax.inject:javax.inject:1'
    implementation 'com.facebook.fbui.textlayoutbuilder:textlayoutbuilder:1.0.0'
    implementation 'com.facebook.fresco:fresco:1.9.0'
    implementation 'com.facebook.fresco:imagepipeline-okhttp3:1.9.0'
    implementation 'com.facebook.soloader:soloader:0.3.0'
    implementation 'com.google.code.findbugs:jsr305:3.0.0'
    implementation 'com.squareup.okhttp3:okhttp:3.10.0'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:3.10.0'
    implementation 'com.squareup.okio:okio:1.14.0'

    implementation 'com.github.LiquidPlayer:LiquidCore:0.5.1'
    /* or, for local debugging use:
    implementation project(':LiquidCoreAndroid')
    */

    testImplementation "org.powermock:powermock-api-mockito:${POWERMOCK_VERSION}"
    testImplementation "org.powermock:powermock-module-junit4-rule:${POWERMOCK_VERSION}"
    testImplementation "org.powermock:powermock-classloading-xstream:${POWERMOCK_VERSION}"
    testImplementation "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"
    testImplementation "org.easytesting:fest-assert-core:${FEST_ASSERT_CORE_VERSION}"
    testImplementation "org.robolectric:robolectric:${ROBOLECTRIC_VERSION}"

    androidTestImplementation fileTree(dir: 'src/../../deps/react-native-0.56.0/ReactAndroid/src/main/third-party/java/buck-android-support/', include: ['*.jar'])
    androidTestImplementation "org.mockito:mockito-core:${MOCKITO_CORE_VERSION}"

}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += configurations.compile
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


apply plugin: 'com.github.dcendents.android-maven'

group='com.github.liquidplayer'